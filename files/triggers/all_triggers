-------------------------------------------------------------
-- Триггер для автоматического создания записи категории при-
-- создании нового клиента ----------------------------------

CREATE OR REPLACE FUNCTION auto_category()
RETURNS TRIGGER
AS $$ 
	BEGIN
	INSERT INTO customer_category
	VALUES (NEW.id, 4);
	RETURN NEW;
	END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER auto_category
AFTER INSERT ON customer
FOR EACH ROW EXECUTE FUNCTION auto_category();


-------------------------------------------------------------
-- Триггер для автоматического преобразования номера --------
-- телефона клиента по маске +Х (ХХХ) ХХХ-ХХ-ХХ -------------

CREATE OR REPLACE FUNCTION auto_contacts_formater()
RETURNS TRIGGER
AS $$
BEGIN
	NEW.contacts = contacts_formatter(NEW.contacts);
	RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER auto_contacts_formater
BEFORE INSERT ON customer
FOR EACH ROW
EXECUTE FUNCTION auto_contacts_formater();


-------------------------------------------------------------
-- Триггер для проверки уникальности номера телефона --------
-- нового клиента -------------------------------------------

CREATE OR REPLACE FUNCTION unique_contacts_checker()
RETURNS TRIGGER
AS $$
BEGIN
	IF NEW.contacts IN (SELECT contacts FROM customer) THEN 
		RAISE EXCEPTION 'Уже есть клиент с таким номером телефона!';
	END IF;
	RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER auto_unique_contacts_checker
BEFORE INSERT OR UPDATE ON customer
FOR EACH ROW
EXECUTE FUNCTION unique_contacts_checker();

-------------------------------------------------------------
-- Триггер для автоматического изменения статуса наличия ----
-- книги в доступе в прокат ---------------------------------

CREATE OR REPLACE FUNCTION book_status_changer()
RETURNS TRIGGER
AS $$
BEGIN
	IF NEW.date_in IS NOT NULL THEN
		UPDATE book SET available = TRUE WHERE id = NEW.book_id;
	ELSE 
		UPDATE book SET available = FALSE WHERE id = NEW.book_id;
	END IF;
	RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER book_status_changer
BEFORE INSERT OR UPDATE ON transaction
FOR EACH ROW
EXECUTE FUNCTION book_status_changer();


-------------------------------------------------------------
-- Триггер для автоматического подсчета стоимости проката ---
-- и занесение этих данных в транзакцию ---------------------

CREATE OR REPLACE FUNCTION total_counter()
RETURNS TRIGGER
AS $$
	DECLARE 
		discount_size real;
	BEGIN
		discount_size := 1 - (SELECT(discount/100) 
                              FROM customer, customer_category, category
                              WHERE customer.id = NEW.customer_id AND
                              customer.id = customer_category.customer_id AND
                              category.id = customer_category.category_id);
	IF NEW.date_in IS NOT NULL THEN
		NEW.total = interval_counter(NEW.date_out, NEW.date_in) * 
			(SELECT cost_per_day from book where id = NEW.book_id);
		NEW.total = FLOOR(NEW.total*discount_size) + NEW.penalty;
		RAISE NOTICE 'Итоговая стоимость составит: % рублей', NEW.total;
	END IF;
	RETURN NEW;
	END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER total_counter
BEFORE UPDATE ON transaction
FOR EACH ROW
EXECUTE FUNCTION total_counter();

-------------------------------------------------------------

